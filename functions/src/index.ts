import * as functions from 'firebase-functions';
import * as admin from 'firebase-admin';
import axios from 'axios';

// Initialize Firebase Admin
admin.initializeApp();
const db = admin.firestore();

interface Player {
  id: string;
  name: string;
  isHost: boolean;
  joinedAt: admin.firestore.Timestamp | Date;
  score: number;
  avatarUrl?: string;
  hasAddedSongs?: boolean;
  isReady?: boolean;
}

interface Lobby {
  id: string;
  hostFirebaseUid: string;
  hostSpotifyUserId: string;
  playlistId?: string;
  playlistName?: string;
  status: 'waiting' | 'collecting_songs' | 'in_progress' | 'finished';
  createdAt: admin.firestore.Timestamp | Date;
  startedAt?: admin.firestore.Timestamp | Date;
  maxPlayers: number;
  currentRound?: number;
  players: {
    [playerId: string]: Player;
  };
}

interface TrackProposal {
  trackUri: string;
  proposedBy: string;
  trackInfo: {
    uri: string;
    name: string;
    artists: Array<{name: string, id: string}>;
    duration_ms: number;
    preview_url?: string;
    album: {
      name: string;
      images: Array<{url: string, height: number, width: number}>;
    };
  };
  status: 'pending' | 'approved' | 'rejected';
  proposedAt: admin.firestore.Timestamp | Date;
  reason?: string;
}

// Helper function to get Spotify access token from refresh token
async function getSpotifyAccessToken(refreshToken: string): Promise<string> {
  const clientId = functions.config().spotify.client_id;
  const clientSecret = functions.config().spotify.client_secret;
  
  if (!clientId || !clientSecret) {
    throw new Error('Spotify credentials not configured');
  }

  const response = await axios.post('https://accounts.spotify.com/api/token', 
    new URLSearchParams({
      grant_type: 'refresh_token',
      refresh_token: refreshToken,
    }),
    {
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Authorization': `Basic ${Buffer.from(`${clientId}:${clientSecret}`).toString('base64')}`,
      },
    }
  );

  if (!response.data.access_token) {
    throw new Error('Failed to get Spotify access token');
  }

  return response.data.access_token;
}

// Helper function to create Spotify playlist
async function createSpotifyPlaylist(
  accessToken: string, 
  userId: string, 
  name: string, 
  description: string = 'Generated by Music Game'
): Promise<{id: string, snapshot_id: string}> {
  const response = await axios.post(
    `https://api.spotify.com/v1/users/${userId}/playlists`,
    {
      name,
      description,
      public: false,
    },
    {
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'Content-Type': 'application/json',
      },
    }
  );

  return {
    id: response.data.id,
    snapshot_id: response.data.snapshot_id,
  };
}

// Helper function to add tracks to Spotify playlist
async function addTracksToPlaylist(
  accessToken: string,
  playlistId: string,
  trackUris: string[]
): Promise<string> {
  // Spotify API allows max 100 tracks per request
  const batchSize = 100;
  let latestSnapshotId = '';

  for (let i = 0; i < trackUris.length; i += batchSize) {
    const batch = trackUris.slice(i, i + batchSize);
    
    const response = await axios.post(
      `https://api.spotify.com/v1/playlists/${playlistId}/tracks`,
      {
        uris: batch,
      },
      {
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Content-Type': 'application/json',
        },
      }
    );

    latestSnapshotId = response.data.snapshot_id;
  }

  return latestSnapshotId;
}

// Main Cloud Function - triggered when lobby status changes to 'in_progress'
export const onStartGame = functions.firestore
  .document('lobbies/{lobbyId}')
  .onUpdate(async (change, context) => {
    const before = change.before.data() as Lobby;
    const after = change.after.data() as Lobby;
    const lobbyId = context.params.lobbyId;

    // Only process if status changed from 'collecting_songs' to 'in_progress'
    if (before.status !== 'collecting_songs' || after.status !== 'in_progress') {
      return;
    }

    functions.logger.info(`Starting game for lobby ${lobbyId}`);

    try {
      // Validate all players are ready
      const players = Object.values(after.players);
      const allReady = players.every(player => player.isReady === true);

      if (!allReady) {
        throw new Error('Not all players are ready');
      }

      // Get host's refresh token (this should be securely stored in the lobby document)
      // Note: In production, you'd store this in a separate secure collection
      const hostDoc = await db.collection('user_tokens').doc(after.hostFirebaseUid).get();
      
      if (!hostDoc.exists) {
        throw new Error('Host Spotify token not found');
      }

      const hostTokenData = hostDoc.data();
      if (!hostTokenData?.spotify_refresh_token) {
        throw new Error('Host Spotify refresh token not found');
      }

      // Get access token
      const accessToken = await getSpotifyAccessToken(hostTokenData.spotify_refresh_token);

      // Get all proposed tracks for this lobby
      const proposalsSnapshot = await db
        .collection('lobbies')
        .doc(lobbyId)
        .collection('proposals')
        .where('status', '==', 'pending')
        .get();

      const trackUris: string[] = [];
      const proposalUpdates: Promise<void>[] = [];

      // Collect track URIs and prepare to update proposal status
      proposalsSnapshot.docs.forEach(doc => {
        const proposal = doc.data() as TrackProposal;
        trackUris.push(proposal.trackUri);
        
        // Update proposal status to approved
        proposalUpdates.push(
          doc.ref.update({
            status: 'approved',
            approvedAt: admin.firestore.FieldValue.serverTimestamp(),
          })
        );
      });

      if (trackUris.length === 0) {
        throw new Error('No tracks proposed for this lobby');
      }

      // Create Spotify playlist
      const playlistName = after.playlistName || `Music Game - Lobby ${lobbyId}`;
      const playlist = await createSpotifyPlaylist(
        accessToken,
        after.hostSpotifyUserId,
        playlistName,
        `Playlist created for Music Game lobby ${lobbyId} with ${players.length} players`
      );

      // Add tracks to playlist
      const snapshotId = await addTracksToPlaylist(accessToken, playlist.id, trackUris);

      // Update lobby with playlist information
      await db.collection('lobbies').doc(lobbyId).update({
        playlistId: playlist.id,
        snapshotId: snapshotId,
        startedAt: admin.firestore.FieldValue.serverTimestamp(),
      });

      // Update all proposals to approved status
      await Promise.all(proposalUpdates);

      // Create playlist collection document for tracking
      await db.collection('playlists').doc(lobbyId).set({
        lobbyId,
        playlistId: playlist.id,
        snapshotId: snapshotId,
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        trackCount: trackUris.length,
        playerCount: players.length,
      });

      functions.logger.info(
        `Successfully created playlist ${playlist.id} for lobby ${lobbyId} with ${trackUris.length} tracks`
      );

    } catch (error) {
      functions.logger.error(`Error starting game for lobby ${lobbyId}:`, error);
      
      // Revert lobby status on error
      await db.collection('lobbies').doc(lobbyId).update({
        status: 'collecting_songs',
        error: error instanceof Error ? error.message : 'Unknown error occurred',
        errorAt: admin.firestore.FieldValue.serverTimestamp(),
      });

      throw error;
    }
  }); 