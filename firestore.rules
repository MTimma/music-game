rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Lobby rules
    match /lobbies/{lobbyId} {
      // Anyone authenticated can read lobbies
      allow read: if request.auth != null;
      
      // Anyone authenticated can create a lobby
      allow create: if request.auth != null;
      
      // Players can update their own ready status, host can update lobby status
      allow update: if request.auth != null && (
        // Player updating their own ready status
        (request.auth.uid in resource.data.players.keys() &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['players']) &&
         request.resource.data.players[request.auth.uid].diff(resource.data.players[request.auth.uid]).affectedKeys().hasOnly(['isReady'])) ||
        // Host updating lobby (status changes, playlist info)
        (request.auth.uid == resource.data.hostFirebaseUid)
      );
      
      // Only the host can delete the lobby
      allow delete: if request.auth != null
        && request.auth.uid == resource.data.hostFirebaseUid;
    }
    
    // Track proposals rules
    match /lobbies/{lobbyId}/proposals/{trackUri} {
      // Only players in the lobby can read proposals
      allow read: if request.auth != null 
        && exists(/databases/$(database)/documents/lobbies/$(lobbyId))
        && (request.auth.uid in get(/databases/$(database)/documents/lobbies/$(lobbyId)).data.players.keys());
      
      // Only players in the lobby can create proposals for themselves
      allow create: if request.auth != null 
        && exists(/databases/$(database)/documents/lobbies/$(lobbyId))
        && (request.auth.uid in get(/databases/$(database)/documents/lobbies/$(lobbyId)).data.players.keys())
        && request.auth.uid == request.resource.data.proposedBy;
      
      // Only host or Cloud Functions can update proposals (approve/reject)
      allow update: if request.auth != null && (
        request.auth.uid == get(/databases/$(database)/documents/lobbies/$(lobbyId)).data.hostFirebaseUid
      );
      
      // Only host can delete proposals
      allow delete: if request.auth != null
        && request.auth.uid == get(/databases/$(database)/documents/lobbies/$(lobbyId)).data.hostFirebaseUid;
    }
    
    // Playlist collection rules
    match /playlists/{lobbyId} {
      // Only players in the corresponding lobby can read
      allow read: if request.auth != null 
        && exists(/databases/$(database)/documents/lobbies/$(lobbyId))
        && (request.auth.uid in get(/databases/$(database)/documents/lobbies/$(lobbyId)).data.players.keys());
      
      // Only the host can create the playlist document
      allow create: if request.auth != null 
        && exists(/databases/$(database)/documents/lobbies/$(lobbyId))
        && request.auth.uid == get(/databases/$(database)/documents/lobbies/$(lobbyId)).data.hostFirebaseUid;
      
      // Only players in the lobby can update (add songs)
      allow update: if request.auth != null 
        && exists(/databases/$(database)/documents/lobbies/$(lobbyId))
        && (request.auth.uid in get(/databases/$(database)/documents/lobbies/$(lobbyId)).data.players.keys());
    }
    
    // User tokens (for storing Spotify refresh tokens)
    match /user_tokens/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Game state rules (legacy)
    match /games/{gameId} {
      allow read, write: if request.auth != null;
    }
  }
} 